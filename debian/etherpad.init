#!/bin/bash

### BEGIN INIT INFO
# Provides:          etherpad
# Required-Start:    $networking $syslog $remote_fs
# Required-Stop:     $networking $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Run Etherpad
# Description:       A web-based word processor that allows
#                    people to work together in real-time.
#                    .
#                    When multiple people edit the same document simultaneously,
#                    any changes are instantly reflected on everyone's screen.
#                    The result is a new and productive way to collaborate on
#                    text documents, useful for meeting notes, drafting
#                    sessions, education, team programming, and more.
### END INIT INFO

# Author: penSec.IT UG (haftungsbeschränkt) <mail@pensec.it>
# Author: Per Andersson <avtobiff@gmail.com>
# Author: Mikko Rantalainen <mikko.rantalainen@peda.net>

################################################################################
#
# Copyright (c) 2010 penSec.IT UG (haftungsbeschränkt)
#        http://www.pensec.it
#        mail@pensec.it
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License. 
#
################################################################################

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Collaborative real-time editor"
NAME="etherpad"
DAEMON_BASE="/usr/share/etherpad"
DAEMON=$DAEMON_BASE/bin/run.sh
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
OOFFICE_LOG="/var/log/etherpad/ooffice.log"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	pgrep -f 'java.*etherpad' > /dev/null && return 1
	( cd "$DAEMON_BASE"; su - etherpad -s /bin/bash -c "bin/DocumentConverter.py --daemon" >> "$OOFFICE_LOG" 2>&1 ) &
	start-stop-daemon --background --chdir $DAEMON_BASE --chuid etherpad:etherpad --start --quiet --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.

	[ "$VERBOSE" != no ] && echo -n "Waiting for service to come up ..."
	for counter in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; do
		echo "GET /" | netcat -w 1 localhost 9000 > /dev/null 2>&1 && break
		[ "$VERBOSE" != no ] && echo -n "."
		sleep 1
	done
	[ "$VERBOSE" != no ] && echo ""

	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	( cd "$DAEMON_BASE"; su - etherpad -s /bin/bash -c "bin/DocumentConverter.py --shutdown" >> "$OOFFICE_LOG" 2>&1 ) &
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc -p $PIDFILE "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  force-stop)
	# make sure every etherpad instance is killed
	pkill -f 'java.*etherpad'
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload|force-stop}" >&2
	exit 3
	;;
esac

:

